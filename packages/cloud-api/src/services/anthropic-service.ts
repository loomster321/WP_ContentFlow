import Anthropic from '@anthropic-ai/sdk';
import { AIGenerationResponse } from '@wp-content-flow/shared-types';
import { aiLogger } from '../utils/logger';

interface AnthropicRequest {
  model: string;
  messages: Array<{ role: 'system' | 'user' | 'assistant'; content: string }>;
  temperature: number;
  maxTokens: number;
}

export class AnthropicService {
  private client: Anthropic;

  constructor() {
    const apiKey = process.env.ANTHROPIC_API_KEY;
    if (!apiKey) {
      throw new Error('ANTHROPIC_API_KEY environment variable is required');
    }

    this.client = new Anthropic({
      apiKey: apiKey
    });
  }

  async generateContent(request: AnthropicRequest): Promise<AIGenerationResponse> {
    const startTime = Date.now();
    
    try {
      aiLogger.info('Sending request to Anthropic', {
        model: request.model,
        messageCount: request.messages.length,
        temperature: request.temperature,
        maxTokens: request.maxTokens
      });

      // Anthropic requires system message to be separate
      const systemMessage = request.messages.find(m => m.role === 'system');
      const userMessages = request.messages.filter(m => m.role !== 'system');

      const completion = await this.client.messages.create({
        model: request.model,
        messages: userMessages.map(msg => ({
          role: msg.role as 'user' | 'assistant',
          content: msg.content
        })),
        system: systemMessage?.content || undefined,
        temperature: request.temperature,
        max_tokens: request.maxTokens
      });

      const content = completion.content[0];
      if (!content || content.type !== 'text') {
        throw new Error('No text content generated by Anthropic');
      }

      const processingTime = (Date.now() - startTime) / 1000;

      // Calculate confidence score
      const confidenceScore = this.calculateConfidenceScore(content.text, completion);

      const response: AIGenerationResponse = {
        content: content.text,
        confidenceScore,
        tokenUsage: {
          promptTokens: completion.usage.input_tokens,
          completionTokens: completion.usage.output_tokens,
          totalTokens: completion.usage.input_tokens + completion.usage.output_tokens
        },
        processingTime,
        agentUsed: 'anthropic',
        metadata: {
          model: request.model,
          temperature: request.temperature,
          stopReason: completion.stop_reason,
          anthropicId: completion.id
        }
      };

      aiLogger.info('Anthropic request completed', {
        contentLength: content.text.length,
        tokenUsage: response.tokenUsage,
        processingTime,
        confidenceScore
      });

      return response;

    } catch (error) {
      const processingTime = (Date.now() - startTime) / 1000;
      
      aiLogger.error('Anthropic request failed', {
        error: error instanceof Error ? error.message : String(error),
        processingTime,
        model: request.model
      });

      throw error;
    }
  }

  /**
   * Calculate confidence score for Anthropic responses
   */
  private calculateConfidenceScore(content: string, completion: Anthropic.Messages.Message): number {
    let score = 0.5; // Base score

    // Content length indicator
    const wordCount = content.split(' ').length;
    if (wordCount >= 10 && wordCount <= 1000) {
      score += 0.2;
    }

    // Completion finished naturally
    if (completion.stop_reason === 'end_turn') {
      score += 0.3;
    } else if (completion.stop_reason === 'stop_sequence') {
      score += 0.2;
    }

    // Content quality indicators
    const hasStructure = content.includes('.') || content.includes('!') || content.includes('?');
    if (hasStructure) {
      score += 0.1;
    }

    // Not cut off abruptly
    const endsWell = content.trim().match(/[.!?]$/);
    if (endsWell) {
      score += 0.1;
    }

    return Math.min(score, 1.0);
  }

  /**
   * Test API connection
   */
  async testConnection(): Promise<boolean> {
    try {
      await this.client.messages.create({
        model: 'claude-3-haiku-20240307',
        messages: [{ role: 'user', content: 'Test connection' }],
        max_tokens: 5,
        temperature: 0.1
      });
      
      aiLogger.info('Anthropic connection test successful');
      return true;
    } catch (error) {
      aiLogger.error('Anthropic connection test failed', {
        error: error instanceof Error ? error.message : String(error)
      });
      return false;
    }
  }

  /**
   * Get available models
   */
  getAvailableModels(): string[] {
    return [
      'claude-3-5-sonnet-20241022',
      'claude-3-5-haiku-20241022', 
      'claude-3-opus-20240229',
      'claude-3-sonnet-20240229',
      'claude-3-haiku-20240307'
    ];
  }
}