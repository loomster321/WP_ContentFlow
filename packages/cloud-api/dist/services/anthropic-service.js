"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnthropicService = void 0;
const sdk_1 = __importDefault(require("@anthropic-ai/sdk"));
const logger_1 = require("../utils/logger");
class AnthropicService {
    client;
    constructor() {
        const apiKey = process.env.ANTHROPIC_API_KEY;
        if (!apiKey) {
            throw new Error('ANTHROPIC_API_KEY environment variable is required');
        }
        this.client = new sdk_1.default({
            apiKey: apiKey
        });
    }
    async generateContent(request) {
        const startTime = Date.now();
        try {
            logger_1.aiLogger.info('Sending request to Anthropic', {
                model: request.model,
                messageCount: request.messages.length,
                temperature: request.temperature,
                maxTokens: request.maxTokens
            });
            // Anthropic requires system message to be separate
            const systemMessage = request.messages.find(m => m.role === 'system');
            const userMessages = request.messages.filter(m => m.role !== 'system');
            const completion = await this.client.messages.create({
                model: request.model,
                messages: userMessages.map(msg => ({
                    role: msg.role,
                    content: msg.content
                })),
                system: systemMessage?.content || undefined,
                temperature: request.temperature,
                max_tokens: request.maxTokens
            });
            const content = completion.content[0];
            if (!content || content.type !== 'text') {
                throw new Error('No text content generated by Anthropic');
            }
            const processingTime = (Date.now() - startTime) / 1000;
            // Calculate confidence score
            const confidenceScore = this.calculateConfidenceScore(content.text, completion);
            const response = {
                content: content.text,
                confidenceScore,
                tokenUsage: {
                    promptTokens: completion.usage.input_tokens,
                    completionTokens: completion.usage.output_tokens,
                    totalTokens: completion.usage.input_tokens + completion.usage.output_tokens
                },
                processingTime,
                agentUsed: 'anthropic',
                metadata: {
                    model: request.model,
                    temperature: request.temperature,
                    stopReason: completion.stop_reason,
                    anthropicId: completion.id
                }
            };
            logger_1.aiLogger.info('Anthropic request completed', {
                contentLength: content.text.length,
                tokenUsage: response.tokenUsage,
                processingTime,
                confidenceScore
            });
            return response;
        }
        catch (error) {
            const processingTime = (Date.now() - startTime) / 1000;
            logger_1.aiLogger.error('Anthropic request failed', {
                error: error instanceof Error ? error.message : String(error),
                processingTime,
                model: request.model
            });
            throw error;
        }
    }
    /**
     * Calculate confidence score for Anthropic responses
     */
    calculateConfidenceScore(content, completion) {
        let score = 0.5; // Base score
        // Content length indicator
        const wordCount = content.split(' ').length;
        if (wordCount >= 10 && wordCount <= 1000) {
            score += 0.2;
        }
        // Completion finished naturally
        if (completion.stop_reason === 'end_turn') {
            score += 0.3;
        }
        else if (completion.stop_reason === 'stop_sequence') {
            score += 0.2;
        }
        // Content quality indicators
        const hasStructure = content.includes('.') || content.includes('!') || content.includes('?');
        if (hasStructure) {
            score += 0.1;
        }
        // Not cut off abruptly
        const endsWell = content.trim().match(/[.!?]$/);
        if (endsWell) {
            score += 0.1;
        }
        return Math.min(score, 1.0);
    }
    /**
     * Test API connection
     */
    async testConnection() {
        try {
            await this.client.messages.create({
                model: 'claude-3-haiku-20240307',
                messages: [{ role: 'user', content: 'Test connection' }],
                max_tokens: 5,
                temperature: 0.1
            });
            logger_1.aiLogger.info('Anthropic connection test successful');
            return true;
        }
        catch (error) {
            logger_1.aiLogger.error('Anthropic connection test failed', {
                error: error instanceof Error ? error.message : String(error)
            });
            return false;
        }
    }
    /**
     * Get available models
     */
    getAvailableModels() {
        return [
            'claude-3-5-sonnet-20241022',
            'claude-3-5-haiku-20241022',
            'claude-3-opus-20240229',
            'claude-3-sonnet-20240229',
            'claude-3-haiku-20240307'
        ];
    }
}
exports.AnthropicService = AnthropicService;
