/**
 * Issue #5 Fix Verification Test
 * 
 * This test verifies that the fix for the WordPress editor crash issue works correctly.
 * The fix replaced dangerouslySetInnerHTML with RichText components to prevent
 * block validation failures during post save.
 */

const { test, expect } = require('@playwright/test');

test.describe('Issue #5 - WordPress Editor Save Fix Verification', () => {
    const adminUrl = 'http://localhost:8080/wp-admin';
    const username = 'admin';
    const password = '!3cTXkh)9iDHhV5o*N';

    test.beforeEach(async ({ page }) => {
        // Login to WordPress admin
        await page.goto(`${adminUrl}/wp-login.php`);
        await page.fill('#user_login', username);
        await page.fill('#user_pass', password);
        await page.click('#wp-submit');
        
        // Wait for dashboard to load
        await page.waitForURL(/wp-admin/);
    });

    test('AI Text Generator block saves without errors after fix', async ({ page }) => {
        console.log('Starting fix verification test...');
        
        // Create a new post
        await page.goto(`${adminUrl}/post-new.php`);
        
        // Wait for block editor to fully load
        await page.waitForSelector('.block-editor-writing-flow', { timeout: 10000 });
        
        // Add post title
        const postTitle = `Fix Verification Test - ${Date.now()}`;
        await page.fill('.wp-block-post-title', postTitle);
        
        // Add the AI Text Generator block
        await page.click('button[aria-label="Toggle block inserter"]');
        await page.waitForSelector('.block-editor-inserter__panel-content');
        
        // Search for our block
        await page.fill('input[placeholder="Search"]', 'AI Text');
        await page.waitForTimeout(500);
        
        // Click on the AI Text Generator block
        const blockButton = page.locator('.block-editor-block-types-list__item').filter({ hasText: 'AI Text Generator' });
        if (await blockButton.count() > 0) {
            await blockButton.first().click();
        } else {
            // Fallback: try to add via slash command
            await page.keyboard.press('Escape');
            await page.click('.block-editor-default-block-appender__content');
            await page.keyboard.type('/ai text');
            await page.waitForTimeout(500);
            await page.keyboard.press('Enter');
        }
        
        // Wait for block to be added
        await page.waitForSelector('.wp-content-flow-ai-text-generator', { timeout: 5000 });
        
        // Add some test content to the block
        const contentArea = page.locator('.wp-content-flow-ai-generated-content, .content-display').first();
        if (await contentArea.count() > 0) {
            await contentArea.click();
            await page.keyboard.type('This is test content generated by AI for verification purposes.');
        }
        
        // Monitor network for save request
        const savePromise = page.waitForResponse(
            response => response.url().includes('/wp-json/wp/v2/posts') && 
                       (response.request().method() === 'POST' || response.request().method() === 'PUT'),
            { timeout: 15000 }
        );
        
        // Save the post as draft
        await page.keyboard.press('Control+s');
        
        // Alternative: Click the save draft button if keyboard shortcut doesn't work
        const saveDraftButton = page.locator('button').filter({ hasText: /Save draft|Save as draft/i });
        if (await saveDraftButton.count() > 0) {
            await saveDraftButton.first().click();
        }
        
        // Wait for save response
        console.log('Waiting for save response...');
        const saveResponse = await savePromise;
        const status = saveResponse.status();
        console.log(`Save response status: ${status}`);
        
        // Verify save was successful
        expect(status).toBeLessThan(400); // Should not be 500 error
        
        // Check for success notices
        const savedNotice = page.locator('.components-snackbar__content, .components-notice__content').filter({ hasText: /saved|draft/i });
        if (await savedNotice.count() > 0) {
            console.log('Save notice appeared - success!');
        }
        
        // Verify no error messages
        const errorMessages = page.locator('.editor-error-boundary, .components-notice.is-error');
        const errorCount = await errorMessages.count();
        expect(errorCount).toBe(0);
        
        // Reload the page to verify content persists
        await page.reload();
        await page.waitForSelector('.block-editor-writing-flow', { timeout: 10000 });
        
        // Check that our block and content are still there
        const blockAfterReload = page.locator('.wp-content-flow-ai-text-generator');
        await expect(blockAfterReload).toBeVisible();
        
        // Take screenshot as evidence
        await page.screenshot({ 
            path: 'e2e/issue-5-fix-verification.png',
            fullPage: true 
        });
        
        console.log('✅ Fix verification complete - Post saves successfully with AI Text Generator block!');
    });

    test('Block validation passes without errors', async ({ page }) => {
        // Navigate to new post
        await page.goto(`${adminUrl}/post-new.php`);
        await page.waitForSelector('.block-editor-writing-flow');
        
        // Add the AI Text Generator block
        await page.click('.block-editor-default-block-appender__content');
        await page.keyboard.type('/ai text');
        await page.waitForTimeout(500);
        await page.keyboard.press('Enter');
        
        // Check console for validation errors
        const consoleErrors = [];
        page.on('console', msg => {
            if (msg.type() === 'error') {
                consoleErrors.push(msg.text());
            }
        });
        
        // Add content and trigger validation
        const block = page.locator('.wp-content-flow-ai-text-generator').first();
        if (await block.count() > 0) {
            await block.click();
            await page.keyboard.type('Test content for validation');
        }
        
        // Switch to code editor to trigger validation
        await page.click('button[aria-label="Options"]');
        await page.click('button:has-text("Code editor")');
        await page.waitForTimeout(1000);
        
        // Switch back to visual editor
        await page.click('button:has-text("Exit code editor")');
        await page.waitForTimeout(1000);
        
        // Check for block validation errors
        const invalidBlocks = page.locator('.block-editor-warning');
        const invalidCount = await invalidBlocks.count();
        expect(invalidCount).toBe(0);
        
        // Verify no "unexpected or invalid content" warnings
        const unexpectedContent = page.locator('text=/unexpected|invalid content/i');
        const unexpectedCount = await unexpectedContent.count();
        expect(unexpectedCount).toBe(0);
        
        console.log('✅ Block validation passes without errors');
    });
});